package frc.robot.subsystems;

import com.ctre.phoenix6.Utils;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrain;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveRequest;

import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.wpilibj.Notifier;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Subsystem;
import edu.wpi.first.wpilibj2.command.button.CommandJoystick;
import frc.robot.Telemetry;
import frc.robot.Constants.Const;

/**
 * Generated by Pheonix Tuner X
 * 
 * Class that extends the Phoenix SwerveDrivetrain class and implements subsystem
 * so it can be used in command-based projects easily.
 */
public class SwerveDriveSubsystem extends SwerveDrivetrain implements Subsystem {
    private static final double kSimLoopPeriod = 0.005; // 5 ms
    private Notifier m_simNotifier = null;
    private double m_lastSimTime;
    private Telemetry telemetry;
    private CommandJoystick joy3;
    private Translation2d velocities;
    private double vx, vy, vTheta;
    private PIDController yawPid;
    private double yawPose;
    private double counter;
    private ChassisSpeeds speeds;
    private boolean FC;
    private boolean yawLock;


    public SwerveDriveSubsystem(SwerveDrivetrainConstants driveTrainConstants, double OdometryUpdateFrequency, SwerveModuleConstants... modules) {
        super(driveTrainConstants, OdometryUpdateFrequency, modules);
        if (Utils.isSimulation()) {
            startSimThread();
        }
        yawPid = new PIDController(Const.SwerveDrive.yawKp, Const.SwerveDrive.yawKi, 0);
        yawPid.setSetpoint(m_pigeon2.getYaw().getValueAsDouble());
        yawPid.enableContinuousInput(0, 360);

        speeds = new ChassisSpeeds(0,0,0);
    }
    public SwerveDriveSubsystem(SwerveDrivetrainConstants driveTrainConstants, SwerveModuleConstants... modules) {
        super(driveTrainConstants, modules);
        if (Utils.isSimulation()) {
            startSimThread();
        }
        yawPid = new PIDController(Const.SwerveDrive.yawKp, Const.SwerveDrive.yawKi, 0);
        yawPid.setSetpoint(m_pigeon2.getYaw().getValueAsDouble());
        yawPid.enableContinuousInput(0, 360);

        speeds = new ChassisSpeeds(0,0,0);
    }

    public double getYaw(){
        return m_pigeon2.getYaw().getValueAsDouble();
    }

    private void startSimThread() {
        m_lastSimTime = Utils.getCurrentTimeSeconds();

        /* Run simulation at a faster rate so PID gains behave more reasonably */
        m_simNotifier = new Notifier(() -> {
            final double currentTime = Utils.getCurrentTimeSeconds();
            double deltaTime = currentTime - m_lastSimTime;
            m_lastSimTime = currentTime;

            /* use the measured time delta, get battery voltage from WPILib */
            updateSimState(deltaTime, RobotController.getBatteryVoltage());
        });
        m_simNotifier.startPeriodic(kSimLoopPeriod);
    }

    public Pose2d getPose(){

        return m_odometry.getEstimatedPosition();
    }

    public void resetPose(Pose2d pose){
        this.seedFieldRelative(pose);
    }

    public ChassisSpeeds getCurrSpeed(){
        return new ChassisSpeeds(vx, vy, vTheta);
    }

    public void driveFC(ChassisSpeeds speeds){
        yawLock = true;
        this.speeds = speeds;
        FC = true;
    }

    public void resetFC(double rad){
        m_fieldRelativeOffset = new Rotation2d(rad);
    }

    public void driveRC(ChassisSpeeds speeds){
        this.speeds = speeds;
        FC = false;
    }

    public SwerveDriveKinematics getKinematics(){
        return m_kinematics;
    }

    public boolean getBool(){
        return false;
    }

    public boolean disableYawLock(){
        return yawLock == false;
    }

    public void periodic(){
        SmartDashboard.putNumber("xpose", m_odometry.getEstimatedPosition().getX());
        SmartDashboard.putNumber("ypose", m_odometry.getEstimatedPosition().getY());
        SmartDashboard.putNumber("thetapose", m_odometry.getEstimatedPosition().getRotation().getRadians());

        
        /*
         * Seriously, Will?
         */
        if (yawLock){
            if (speeds.omegaRadiansPerSecond == 0){
                if (counter == 0){
                    speeds.omegaRadiansPerSecond = yawPid.calculate(m_pigeon2.getYaw().getValueAsDouble());
                }
                else   
                    counter--;
            }
            else{
                yawPid.setSetpoint(m_pigeon2.getYaw().getValueAsDouble());
                counter = 30;
            }
        }


        if (FC){
            this.setControl(new SwerveRequest.FieldCentric()
                            .withVelocityX(MathUtil.applyDeadband(speeds.vxMetersPerSecond, 0.1))
                            .withVelocityY(MathUtil.applyDeadband(speeds.vyMetersPerSecond, 0.1))
                            .withRotationalRate(MathUtil.applyDeadband(speeds.omegaRadiansPerSecond, 0.1)));
        }
        else {
            this.setControl(new SwerveRequest.RobotCentric()
                            .withVelocityX(MathUtil.applyDeadband(speeds.vxMetersPerSecond, 0.1))
                            .withVelocityY(MathUtil.applyDeadband(speeds.vyMetersPerSecond, 0.1))
                            .withRotationalRate(MathUtil.applyDeadband(speeds.omegaRadiansPerSecond, 0.1)));
        }
    }
    public void stop() {
        driveFC(new ChassisSpeeds(0,0,0));
        yawLock = false;
    }
}